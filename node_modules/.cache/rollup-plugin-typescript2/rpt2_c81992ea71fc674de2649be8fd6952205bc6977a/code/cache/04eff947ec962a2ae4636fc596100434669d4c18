{"code":"import { TrackerConfig } from \"../types/index\";\r\nimport { createHistoryEvent } from \"../utils/pv\";\r\n//监听事件\r\nconst MouseEventList = ['click', 'dblclick', 'contextmenu', 'mousedown', 'mouseup', 'mouseenter', 'mouseout', 'mouseover'];\r\nexport default class Tracker {\r\n    constructor(options) {\r\n        this.data = Object.assign(this.initDef(), options);\r\n        this.installTracker();\r\n    }\r\n    initDef() {\r\n        window.history['pushState'] = createHistoryEvent('pushState');\r\n        window.history['replaceState'] = createHistoryEvent('replaceState');\r\n        return {\r\n            sdkVersion: TrackerConfig.version,\r\n            historyTracker: false,\r\n            hashTracker: false,\r\n            domTracker: false,\r\n            jsError: false\r\n        };\r\n    }\r\n    setUserId(uuid) {\r\n        this.data.uuid = uuid;\r\n    }\r\n    setExtra(extra) {\r\n        this.data.extra = extra;\r\n    }\r\n    //手动上报\r\n    sendTracker(data) {\r\n        this.reportTracker(data);\r\n    }\r\n    //dom点击上报\r\n    targetKeyReport() {\r\n        MouseEventList.forEach(ev => {\r\n            window.addEventListener(ev, e => {\r\n                const target = e.target;\r\n                const targetKey = target.getAttribute('target-key');\r\n                if (targetKey) {\r\n                    this.reportTracker({\r\n                        event: ev,\r\n                        targetKey\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    jsError() {\r\n        this.errorEvent();\r\n        this.promiseReject();\r\n    }\r\n    //js报错日志上报\r\n    errorEvent() {\r\n        window.addEventListener('error', e => {\r\n            this.sendTracker({\r\n                targetKey: 'message',\r\n                event: 'error',\r\n                message: e.message\r\n            });\r\n        });\r\n    }\r\n    //Promise错误日志上报\r\n    promiseReject() {\r\n        window.addEventListener('unhandledrejection', e => {\r\n            e.promise.catch(error => {\r\n                this.sendTracker({\r\n                    targetKey: 'reject',\r\n                    event: 'promise',\r\n                    message: error\r\n                });\r\n            });\r\n        });\r\n    }\r\n    //自动上报\r\n    captureEvents(mouseEventList, targetKey, data) {\r\n        mouseEventList.forEach(event => {\r\n            window.addEventListener(event, () => {\r\n                console.log('监听事件操作');\r\n                this.reportTracker({\r\n                    event,\r\n                    targetKey,\r\n                    data\r\n                });\r\n            });\r\n        });\r\n    }\r\n    //初始化重写函数\r\n    installTracker() {\r\n        //监听history\r\n        if (this.data.historyTracker) {\r\n            //把要捕获的事件传入\r\n            //targetKey值由后端来定义，记录事件\r\n            this.captureEvents(['pushState', 'replaceState', 'popstate'], 'history-pv');\r\n        }\r\n        //监听hash\r\n        if (this.data.hashTracker) {\r\n            this.captureEvents(['hashState'], 'history-pv');\r\n        }\r\n        //监听dom\r\n        if (this.data.domTracker) {\r\n            this.targetKeyReport();\r\n        }\r\n        //监听js和promise错误日志\r\n        if (this.data.jsError) {\r\n            this.jsError();\r\n        }\r\n    }\r\n    //上报\r\n    reportTracker(data) {\r\n        const params = Object.assign(this.data, data, { time: new Date().getTime() });\r\n        //用navigator.sendBeacon来上报 可以在浏览器关闭的时候也上报 因为BodyInit类型不支持JSON所以要改成键值对形式\r\n        //url是被编码（encoded）过的所以用这个请求头\r\n        let headers = {\r\n            type: 'application/x-www-form-urlencoded'\r\n        };\r\n        let blob = new Blob([JSON.stringify(params)], headers);\r\n        navigator.sendBeacon(this.data.requestUrl, blob);\r\n    }\r\n}\r\n","references":["E:/daybyday/埋点SDK/track/src/types/index.ts","E:/daybyday/埋点SDK/track/src/utils/pv.ts"]}
